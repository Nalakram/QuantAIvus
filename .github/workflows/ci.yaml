name: Build and Test MarketMind

on:
  workflow_dispatch:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]

jobs:
#  build_cpp:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v4
#    - name: Cache ccache
#      uses: actions/cache@v4
#      with:
#        path: ~/.ccache
#        key: ccache-${{ runner.os }}-${{ github.sha }}
#        restore-keys: ccache-${{ runner.os }}-
#    - name: Install dependencies
#      run: |
#        sudo apt-get update
#        sudo apt-get install -y cmake g++ ccache libprotobuf-dev protobuf-compiler-grpc libgrpc-dev libgrpc++-dev cppcheck
#    - name: Run C++ static analysis
#      run: |
#        cppcheck --enable=all --inconclusive --xml --quiet cpp 2> cppcheck-report.xml
#    - name: Upload cppcheck report
#      uses: actions/upload-artifact@v4
#      with:
#        name: cppcheck-report-${{ github.sha }}
#        path: cppcheck-report.xml
#        retention-days: 7
#    - name: Debug cppcheck on failure
#      if: failure()
#      run: cppcheck --enable=all --inconclusive cpp
#    - name: Build C++
#      run: |
#        export CC="ccache g++"
#        cd cpp
#        mkdir -p build && cd build
#        cmake ..
#        cmake --build . --parallel
#    - name: Upload artifact
#      uses: actions/upload-artifact@v4
#      with:
#        name: libInference-${{ github.sha }}
#        path: cpp/build/libInference.so
#        retention-days: 7

  build_python:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.12 ]
        os: [ Ubuntu-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Clear pip cache
        run: pip cache purge
      - name: Clean build directories
        run: |
            rm -rf ./patchedLibs/tensorflow-onnx-1.17.0/build
            rm -rf ./patchedLibs/tensorflow-onnx-1.17.0/*.egg-info
      - name: List directory contents
        run: dir .\patchedLibs\tensorflow-onnx-1.17.0 /s
      - name: Install dependencies
        run: pip install -r srcPy/requirements.txt
      - name: Install test tools
        run: pip install flake8 pytest pytest-cov
      - name: Run tests
        run: pytest --cov=srcPy --cov-report=term --cov-report=xml --cov-fail-under=80 tests/python
      - name: Lint Python code
        run: flake8 srcPy/
      - name: Run Python tests with coverage
        run: |
          pytest --cov=srcPy --cov-report=term --cov-report=xml --cov-fail-under=80 tests/python
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage-${{ github.sha }}-${{ matrix.python-version }}-${{ matrix.os }}
          path: coverage.xml
          retention-days: 7
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}

#  test_data_pipeline:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v4
#    - name: Set up Python
#      uses: actions/setup-python@v5
#      with:
#        python-version: '3.12'
#        cache: 'pip'
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r srcPy/requirements.txt
#        pip install pytest pytest-asyncio pytest-mock pytest-cov aioresponses websockets mlflow
#    - name: Run data pipeline tests with coverage
#      run: |
#        pytest --cov=srcPy --cov-report=term --cov-report=xml --cov-fail-under=90 tests/
#      env:
#        INFLUXDB_TOKEN: ${{ secrets.INFLUXDB_TOKEN }}
#        IB_API_KEY: ${{ secrets.IB_API_KEY }}
#        ALPACA_KEY: ${{ secrets.ALPACA_KEY }}
#        ALPACA_SECRET: ${{ secrets.ALPACA_SECRET }}
#        TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
#        ESG_API_KEY: ${{ secrets.ESG_API_KEY }}
#        FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
#        BBG_API_KEY: ${{ secrets.BBG_API_KEY }}
#        WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
#    - name: Upload coverage report
#      uses: actions/upload-artifact@v4
#      with:
#        name: data-pipeline-coverage-${{ github.sha }}-py3.12-ubuntu
#        path: coverage.xml
#        retention-days: 7
#    - name: Upload coverage to Codecov
#      uses: codecov/codecov-action@v4
#      with:
#        files: coverage.xml
#        token: ${{ secrets.CODECOV_TOKEN }}

#  build_java:
#    runs-on: ubuntu-latest
#    needs: build_cpp
#    steps:
#    - uses: actions/checkout@v4
#    - name: Download C++ artifact
#      uses: actions/download-artifact@v4
#      with:
#        name: libInference-${{ github.sha }}
#        path: java/lib/native
#    - name: Set up Java
#      uses: actions/setup-java@v4
#      with:
#        java-version: '21'
#        distribution: 'temurin'
#        cache: 'maven'
#    - name: Run Java static analysis
#      run: mvn checkstyle:check
#    - name: Build with Maven
#      uses: nick-invision/retry@v3
#      with:
#        timeout_minutes: 10
#        max_attempts: 3
#        command: mvn clean install -Djava.library.path=java/lib/native -Djava.awt.headless=true
#    - name: Upload Java coverage report
#      uses: actions/upload-artifact@v4
#      with:
#        name: java-coverage-${{ github.sha }}
#        path: target/site/jacoco/jacoco.xml
#        retention-days: 7
#    - name: Upload Java coverage to Codecov
#      uses: codecov/codecov-action@v4
#      with:
#        files: target/site/jacoco/jacoco.xml
#        token: ${{ secrets.CODECOV_TOKEN }}
