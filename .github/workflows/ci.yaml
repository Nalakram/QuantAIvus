name: Build, Test, and Deploy MarketMind  # MarketMind multi-language CI
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Manual trigger

jobs:
  # Build and test Python component
  build_python:
    name: Build & Test Python
    strategy:
      matrix:
        os: [windows]  # Your current runner
    runs-on: [self-hosted, ${{ matrix.os }}]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r srcPy/requirementsFreeze.txt
        shell: bash
      - name: Run Pytest
        run: |
          pytest tests/python/ --junitxml=python_test_results.xml --cov=srcPy --cov-report=xml:coverage.xml
        shell: bash
      - name: Upload Python coverage and test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-artifacts-${{ matrix.os }}
          path: |
            python_test_results.xml
            coverage.xml

  # Build and test C++ component
  build_cpp:
    name: Build & Test C++
    runs-on: [self-hosted, ${{ matrix.os }}, ${{ matrix.compute }}]
    strategy:
      matrix:
        os: [windows, linux]  # Your current runner
        compute: [ cpu, gpu ]
        include:
          - compute: gpu
            compute-label: [ gpu, cuda-12.9 ]
          - compute: cpu
            compute-label: [ cpu ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up CMake
        run: |
          if [ "${{ matrix.os }}" = "linux" ]; then
            sudo apt-get update
            sudo apt-get install -y cmake
          else
            choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          fi
        shell: bash
      - name: Build C++ Backend
        run: |
          cd cpp
          mkdir build && cd build
          cmake -DCMAKE_CXX_STANDARD=20 ..
          cmake --build .
        shell: bash
      - name: Run Inference Benchmark
        run: |
          if [ "${{ matrix.os }}" = "linux" ]; then
            ./bin/inference_benchmark
          else
            .\bin\inference_benchmark.exe
          fi
        shell: bash
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cpp-libs-${{ matrix.os }}-${{ matrix.compute }}
          path: bin/

  # GPU-enabled C++ inference tests with CUDA
  # test_cpp_inference:
  #   name: Test C++ Inference (CUDA)
  #   runs-on: [self-hosted, ${{ matrix.os }}, ${{ matrix.compute }}]
  #    needs: cpp-build
  #    strategy:
  #      matrix:
  #        os: [windows]  # Add 'linux' later
  #        compute: [cpu, gpu]
  #        include:
  #          - compute: gpu
  #            compute-label: [gpu, cuda-12.9]
  #          - compute: cpu
  #            compute-label: [cpu]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y cmake ccache gcc-13 g++-13
  #         sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100 --slave /usr/bin/g++ g++ /usr/bin/g++-13
  #         sudo apt-get install -y nvidia-driver-550
  #         wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
  #         sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600
  #         wget https://developer.download.nvidia.com/compute/cuda/12.9.0/local_installers/cuda-repo-ubuntu2204-12-9-local_12.9.0-550.54.14-1_amd64.deb
  #         sudo dpkg -i cuda-repo-ubuntu2204-12-9-local_12.9.0-550.54.14-1_amd64.deb
  #         sudo cp /var/cuda-repo-ubuntu2204-12-9-local/cuda-*-keyring.gpg /usr/share/keyrings/
  #         sudo apt-get update
  #         sudo apt-get install -y cuda-toolkit-12-9
  #       if: runner.os == 'Linux'
  #     - name: Set CUDA environment variables
  #       run: |
  #         echo "PATH=/usr/local/cuda-12.9/bin:$PATH" >> $GITHUB_ENV
  #         echo "LD_LIBRARY_PATH=/usr/local/cuda-12.9/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
  #       if: runner.os == 'Linux'
  #     - name: Build Inference (CUDA)
  #       run: |
  #         mkdir -p cpp/build_gpu
  #         cd cpp/build_gpu
  #         cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_CUDA=ON -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-12.9 -DCMAKE_CXX_STANDARD=20
  #         cmake --build .
  #     - name: Run GPU Inference Tests
  #       run: |
  #         cd cpp/build_gpu
  #         ctest --output-on-failure
  #     - name: Run Inference Benchmark (CUDA)
  #       run: |
  #         cd cpp/build_gpu/bin
  #         ./inference_benchmark --max-latency 1.0
  #     - name: Upload Inference logs
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: inference-logs
  #         path: cpp/build_gpu/Testing

  # Build and test Java component
  build_java:
    name: Build & Test Java
    needs: build_cpp
    runs-on: [self-hosted, ${{ matrix.os }}]
    strategy:
      matrix:
        os: [windows, linux]  # Your current runner
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      - name: Download C++ Libraries
        uses: actions/download-artifact@v4
        with:
          name: cpp-libs-${{ matrix.os }}-gpu
          path: cpp/build/bin
      - name: Build with Maven
        run: |
          if [ "${{ matrix.os }}" = "linux" ]; then
            mvn -B clean install -Djava.library.path=cpp/build/bin
          else
            mvn -B clean install -Djava.library.path=cpp\build\bin
          fi
        shell: bash
      - name: Debug - List Target Directory Contents
        run: |
          if [ "${{ matrix.os }}" = "linux" ]; then
            ls -la java/target/ || echo "java/target/ directory does not exist"
          else
            dir java\target || echo "java\target\ directory does not exist"
          fi
        shell: bash
      - name: Generate JaCoCo Report
        run: mvn jacoco:report
        shell: bash
      - name: Upload JARs
        if: always()
        run: |
          mkdir -p staging
          if [ "${{ matrix.os }}" = "linux" ]; then
            cp java/target/*.jar staging || echo "No JAR files found in java/target/"
          else
            copy java\target\*.jar staging || echo "No JAR files found in java\target\"
          fi
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: java-artifacts-${{ matrix.os }}
          path: staging
      - name: Upload Java Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: java-coverage-${{ matrix.os }}
          path: java/target/site/jacoco/jacoco.xml
